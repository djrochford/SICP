;Exercise 3.11.  In section 3.2.3 we saw how the environment model described the behavior of
;procedures with local state. Now we have seen how internal definitions work. A typical
;message-passing procedure contains both of these aspects. Consider the bank account
;procedure of section 3.1.1:

(define (make-account balance)
        (define (withdraw amount)
                (if (>= balance amount)
                    (begin (set! balance (- balance amount))
                           balance)
                    "Insufficient funds"))
        (define (deposit amount)
                (set! balance (+ balance amount))
                balance)
        (define (dispatch m)
                (cond ((eq? m 'withdraw) withdraw)
                      ((eq? m 'deposit) deposit)
                      (else (error "Unknown request -- MAKE-ACCOUNT"
                            m))))
        dispatch)

;Show the environment structure generated by the sequence of interactions

(define acc (make-account 50))

((acc 'deposit) 40)
;90

((acc 'withdraw) 60)
;30


"After `(define acc (make-account 50))`

|  global frame  |
|  make-account: ------><procedure-object>
|             <----------------------|
|                |
|       acc:--------------------------------------------|
|________________|                                      |
        ^                                               |
        |                                               |
| make-acount frame |                                   |
|    balance: 50    |                                   |
|                   |                                   |
|    withdraw: ------------><procedure-object>          |
|                 <--------------------|                |
|                   |                                   |
|    deposit:  ------------><procedure-object>          |
|                 <--------------------|                |
|                   |                                   |
|    dispatch: -------------><procedure-object><--------|
|                  <--------------------|
|___________________|



After `((acc 'deposit) 40)`

|  global frame  |
|  make-account: ------><procedure-object>
|             <----------------------|
|                |
|       acc:--------------------------------------------|
|________________|                                      |
        ^                                               |
        |                                               |
| make-acount frame |                                   |
|    balance: 90    |                                   |
|                   |                                   |
|    withdraw: ------------><procedure-object>          |
|                 <--------------------|                |
|                   |                                   |
|    deposit:  ------------><procedure-object>          |
|                 <--------------------|                |
|                   |                                   |
|    dispatch: -------------><procedure-object><--------|
|                  <--------------------|
|___________________|
                   ^ 
        ^          |-------------
        |                       |
|    acc frame     |     |   deposit frame   |
|    m: 'deposit   |     |     amount: 40    |
|__________________|     |___________________|



After  `((acc 'withdraw) 60)`

|  global frame  |
|  make-account: ------><procedure-object>
|             <----------------------|
|                |
|       acc:--------------------------------------------|
|________________|                                      |
        ^                                               |
        |                                               |
| make-acount frame |                                   |
|    balance: 30    |                                   |
|                   |                                   |
|    withdraw: ------------><procedure-object>          |
|                 <--------------------|                |
|                   |                                   |
|    deposit:  ------------><procedure-object>          |
|                 <--------------------|                |
|                   |                                   |
|    dispatch: -------------><procedure-object><--------|
|                  <--------------------|
|___________________|
                   ^ 
        ^          |-------------
        |                       |
|    acc frame     |     |   withdraw frame  |
|    m: 'withdraw  |     |     amount: 60    |
|__________________|     |___________________|

"  

;Where is the local state for acc kept?
"The important local state, `balance`, is kept in the frame that is created when
`make-account` is first executed. The value of `acc` is a procedure that points
to that frame."

;Suppose we define another account

(define acc2 (make-account 100))

;How are the local states for the two accounts kept distinct?

"A second frame, containing its own bindings for `balance`, `withdraw` and `dispatch`,
is created when `(make-account 100)` is executed, and `acc2` is bound to a procedure that
points to that second, distinct frame."
;Which parts of the environment structure are shared between acc and acc2?

"Only the global frame is in the environments of both acc and acc2."
