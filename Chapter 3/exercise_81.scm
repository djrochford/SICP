(define (rand command)
        (define state (random 1.0))
        (cond ((eq? command 'generate) (rand-update state))
              ((eq? command 'reset) (lambda (new-value) (set! state new-value)))))

(define (stream-rand command-stream)
        (define (make-random-stream seed)
                (cons-stream seed (make-random-stream (rand-update seed))))
        (define (make-return-stream commands numbers)
                (let (command (stream-car commands))
                     (cond ( (eq? command 'generate) 
                             (cons-stream (stream-car numbers)
                                          (make-return-stream (stream-cdr commands)
                                                              (stream-cdr numbers))) )
                           ( (and (pair? command) 
                                 (eq? (car command) 'reset)) 
                             (let (new-numbers (make-random-stream (cdr command)))
                                  (cons-stream (stream-car new-numbers)
                                               (make-return-stream (stream-cdr commands)
                                                                   (stream-cdr new-numbers)))) )
                           ((null? command) the-empty-stream)
                           (else (error "bad command -- " command)))))
        (make-return-stream command-stream (make-random-stream 1.0)))

  