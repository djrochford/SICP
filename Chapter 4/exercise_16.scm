(define (lookup-variable-value var env)
        (define (env-loop env)
                (define (scan vars vals)
                        (cond ((null? vars) (env-loop (enclosing-environment env)))
                              ((eq? var (car vars)) (if (eq? (car vals) '*unassigned*')
                                                        (error "Unassigned value" val)
                                                        (car vars)))
                              (else (scan (cdr vars) (cdr vals)))))
                (if (eq? env the-empty-environment)
                    (error "Unbound variable" var)
                    (let ((frame (first-frame env)))
                         (scan (frame-variables frame)
                               (frame-values frame)))))
        (env-loop env))

(define (scan-out-defines proc-body)
        (define (add-definition-to-target definition target)
                (add-to-tail (list (name definition) '*unassigned*')
                             (car target))
                (add-to-tail (make-set (name definition) (body definition))))
        (define (transform-step block target)
                (if (definition? block)
                    (add-definition-to-target block (car target))
                    (add-to-tail block (cdr target))))
        (define (transform body accumulator)
                (let (((first-block) (car body)))
                     (if (null? first-block) 
                         accumulator
                         (transform (cdr body) 
                                    (transform-step first-block
                                                    accumulator)))))
        (make-let (transform proc-body (cons '() '()'))))
                         