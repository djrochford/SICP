;Exercise 4.41.  Write an ordinary Scheme program to solve the multiple dwelling puzzle.

(define (distinct? items)
		(cond ((null? items) #t)
		      ((null? (cdr items)) #t)
		      ((member (car items) (cdr items)) #f)
		      (else (distinct? (cdr items)))))

(define (multiple-dwelling)
		(define (meets-restrictions assignment)
				(let ((baker (car assignment))
				      (cooper (cadr assignment))
				      (fletcher (caddr assignment))
				  	  (miller (cadddr assignment))
				  	  (smith (car (cddddr assignment))))
				(and (distinct? assignment)
					 (not (= baker 5))
					 (not (= cooper 1))
					 (not (= fletcher 5))
					 (> miller cooper)
					 (not (= (abs (- smith fletcher)) 1))
					 (not (= (abs (- fletcher cooper)) 1)))))
		(define (increment assignment)
				(if (null? assignment)
					'done
			    	(let ((head (car assignment))
			    	      (tail (cdr assignment)))
			    	 	  (if (< head 5)
			    	 	 	  (cons (+ head 1) tail)
			    	 	 	  (cons 1 (increment tail))))))
		(define (test-and-generate assignment)
				(cond ((eq? assignment 'done) "No solution")
					  ((meets-restrictions assignment) (list (list 'baker (car assignment))
          				  									 (list 'cooper (cadr assignment))
          				  									 (list 'fletcher (caddr assignment))
          				  									 (list 'miller (cadddr assignment))
          				  									 (list 'smith (car (cddddr assignment)))))
				       (else (test-and-generate (increment assignment)))))
	    (test-and-generate '(1 1 1 1 1)))

(multiple-dwelling)