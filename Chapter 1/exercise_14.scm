;Exercise 1.14.  Draw the tree illustrating the process generated by the count-change procedure of section 1.2.2 in making change for 11 cents. 
;What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?

(define (count-change amount)
        (cc amount 5))

(define (cc amount kinds-of-coins)
        (cond ((= amount 0) 1)
              ((or (< amount 0) (= kinds-of-coins 0)) 0)
              (else (+ (cc amount (- kinds-of-coins 1))
                       (cc (- amount (first-denomination kinds-of-coins))
                           kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
        (cond ((= kinds-of-coins 1) 1)
              ((= kinds-of-coins 2) 5)
              ((= kinds-of-coins 3) 10)
              ((= kinds-of-coins 4) 25)
              ((= kinds-of-coins 5) 50)))


(count-change 11)
(cc 11 5)-------(cc 11 4)-------(cc 11 3)---------------------------------------------(cc 11 2)-----------------------------------------------------(cc 11 1)--(cc 11 0) = 0
     |              |               |                                                    |                                                             |
(cc -39 5) = 0  (cc -13 4) = 0  (cc 1 3)--------(cc 1 2)------(cc 1 1)--(cc 1 0) = 0  (cc 6 2)------------------------------(cc 6 1)--(cc 6 0) = 0  (cc 10 1)--(cc 10 0) = 0
                                    |               |             |                      |                                      |                      |
                                (cc -9 3) = 0   (cc -4 2) = 0 (cc 0 1) = 1            (cc 1 2)------(cc 1 1)--(cc 1 0) = 0  (cc 5 1)--(cc 5 0) = 0  (cc 9 1)--(cc 9 0) = 0
                                                                                          |             |                       |                      |
                                                                                      (cc -4 2) = 0 (cc 0 1) = 1            (cc 4 1)--(cc 4 0) = 0  (cc 8 1)--(cc 8 0) = 0
                                                                                                                                |                      |
                                                                                                                            (cc 3 1)--(cc 3 0) = 0  (cc 7 1)--(cc 7 0) = 0
                                                                                                                                |                      |
                                                                                                                            (cc 2 1)--(cc 2 0) = 0  (cc 6 1)--(cc 6 0) = 0
                                                                                                                                |                      |
                                                                                                                            (cc 1 1)--(cc 1 0) = 0  (cc 5 1)--(cc 5 0) = 0
                                                                                                                                |                      |
                                                                                                                            (cc 0 1) = 1            (cc 4 1)--(cc 4 0) = 0
                                                                                                                                                       |
                                                                                                                                                    (cc 3 1)--(cc 3 0) = 0
                                                                                                                                                       |
                                                                                                                                                    (cc 2 1)--(cc 2 0) = 0
                                                                                                                                                       |
                                                                                                                                                    (cc 1 1)--(cc 1 0) = 0
                                                                                                                                                       |
                                                                                                                                                    (cc 0 1) = 1  

"The algorithm's growth function in space is Theta(amount), and in time it's Theta(amount^5).

At any one time, the computer needs to keep track of all the nodes above the current node
in the computation, and the depth of the tree is proportional to amount, (just like in the Fib case)
so the space growth of this algorithm is Theta(amount)

Let T(n, m) be the number of calls to cc generated by calling (cc n k). For all i, a call to (cc i 1) produces a
call to (cc i 0), which produces no more calls, and a call to (cc i-1 0), until you get to (cc 1 0). This means
that T(n, 1) = 2n + 1 (you can verify this by looking at the tree), so T(n, 1) is Theta(n).

Now consider (cc i 2). This isn't quite so obvious in the n=11 case above, but each invocation of (cc i 2)
produces roughly n/5 (i.e, n over (first-demonimation 2)) (cc j 2) calls, for j<=i -- that's what's happening as you go down vertically from (cc 11 2)
in the tree above. Each for each (cc j 2) call there's an entire (cc j 1) sub-tree of calls. So T(n, 2) is roughly n/2 * (2n +1)
which is Theta(n^2).

Similar reasoning holds for all values of m in T(n, m) -- in general, T(n, m) is Theta(n^m). In particular T(n, 5) is
Theta(n^5), and, hence, count-change is Theta(amount^5)"





