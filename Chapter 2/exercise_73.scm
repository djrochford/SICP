(define (install-sum-package)
        (define (make-sum a1 a2)
                (cond ((=number? a1 0) a2)
                      ((=number? a2 0) a1)
                      ((and (number? a1) (number? a2)) (+ a1 a2))
                      (else (list '+ a1 a2))))
        (define (addend s) (cadr s))
        (define (augend s) (caddr s))
        (define (sum-deriv summation var)
                (make-sum (deriv (addend summation) var)
                          (deriv (augend summation) var)))
        ;; installing
        (define (tag x) (attach-tag '+ x))
        (put 'deriv '+ sum-deriv)
        'done)

(define (install-product-package)
        (define (make-product m1 m2)
                (cond ((or (=number? m1 0) (=number? m2 0)) 0)
                      ((=number? m1 1) m2)
                      ((=number? m2 1) m1)
                      ((and (number? m1) (number? m2)) (* m1 m2))
                      (else (list '* m1 m2))))
        (define (multiplier p) (cadr p))
        (define (multiplicand p) (caddr p))
        (define (product-deriv product var) 
                (make-sum (make-product (multiplier expression) 
                                                      (deriv (multiplicand expression) var))
                                        (make-product (deriv (multiplier expression) var)
                                                      (multiplicand expression))))
        ;; installing
        (define (tag x) (attach-tag '* x))
        (put 'deriv '* product-deriv)
        'done)